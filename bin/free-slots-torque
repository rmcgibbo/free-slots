#!/usr/bin/python
from __future__ import division, print_function
import subprocess
import xml.etree.ElementTree as ET
from collections import defaultdict, namedtuple
status = namedtuple('status', ['properties', 'np_alloc', 'np_total'])

def collect():
    xmldata = subprocess.Popen(['/usr/bin/pbsnodes', '-x'], stdout=subprocess.PIPE).communicate()[0]
    root = ET.fromstring(xmldata)
    count = defaultdict(lambda: 0)
    for node in root.findall('Node'):
        state = node.find('state').text
        if state not in ['free']:
            continue

        properties = node.find('properties').text
        np_total = int(node.find('np').text)
        jobs = node.find('jobs')

        if jobs is None:
            np_alloc = 0
        else:
            np_alloc = len(jobs.text.split(', '))
        count[status(properties, np_alloc, np_total)] += 1
    return count


def format_table(rows):
    cols = zip(*rows)
    col_widths = [max(len(str(value))+2 for value in col) for col in cols]
    format = ' '.join(['%%-%ds' % width for width in col_widths ])
    lines = []
    for row in rows:
        lines.append(format % tuple(row))
    return '\n'.join(lines)


def main():
    count = collect()
    lines = [['Number of nodes', 'Properties', 'Utilization', 'Free slots']]
    lines.append(['-'*len(e) for e in lines[0]])
    for k in sorted(count.keys(), key=lambda c: c.np_alloc/c.np_total):
        lines.append([count[k], k.properties, '%s/%s' % (k.np_alloc, k.np_total), k.np_total-k.np_alloc])

    print('Summary of PBS nodes with free slots\n')
    print(format_table(lines))

if __name__ == '__main__':
    main()
